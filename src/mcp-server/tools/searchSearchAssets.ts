/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { searchSearchAssets } from "../../funcs/searchSearchAssets.js";
import { SearchParameters$zodSchema } from "../../models/searchparameters.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: SearchParameters$zodSchema,
};

export const tool$searchSearchAssets: ToolDefinition<typeof args> = {
  name: "search-assets",
  description:
    `Provides a powerful query interface to filter and retrieve assets and their details

Returns a list of resources matching the specified search criteria. The API supports a variety of search parameters and returns a JSON response with the matching resources and their details.`,
  scopes: ["librarian"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await searchSearchAssets(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
