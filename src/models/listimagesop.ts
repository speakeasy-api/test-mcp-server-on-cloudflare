/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ApiError, ApiError$zodSchema } from "./apierror.js";
import { Direction, Direction$zodSchema } from "./direction.js";
import { FieldsSpec, FieldsSpec$zodSchema } from "./fieldsspec.js";
import { ListResponse, ListResponse$zodSchema } from "./listresponse.js";
import {
  ListStorageType,
  ListStorageType$zodSchema,
} from "./liststoragetype.js";

export type ListImagesGlobals = { cloud_name?: string | undefined };

export const ListImagesGlobals$zodSchema: z.ZodType<
  ListImagesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().describe("The cloud name of your product environment.")
    .optional(),
});

export type ListImagesRequest = {
  type?: ListStorageType | undefined;
  prefix?: string | undefined;
  public_ids?: Array<string> | undefined;
  tags?: boolean | undefined;
  next_cursor?: string | undefined;
  max_results?: number | undefined;
  direction?: Direction | undefined;
  start_at?: string | undefined;
  fields?: Array<FieldsSpec> | undefined;
};

export const ListImagesRequest$zodSchema: z.ZodType<
  ListImagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  direction: Direction$zodSchema.optional(),
  fields: z.array(FieldsSpec$zodSchema).optional(),
  max_results: z.number().int().describe(
    "Maximum number of results to return (1-500).",
  ).optional(),
  next_cursor: z.string().describe("Cursor for pagination.").optional(),
  prefix: z.string().describe(
    "Find resources with a public ID prefix. Requires the `type` parameter.",
  ).optional(),
  public_ids: z.array(z.string()).describe("An array of public IDs to return.")
    .optional(),
  start_at: z.string().datetime({ offset: true }).describe(
    "Retrieve resources uploaded after this timestamp.",
  ).optional(),
  tags: z.boolean().describe(
    "Whether to include the list of tag names assigned to each asset. Default: false",
  ).optional(),
  type: ListStorageType$zodSchema.optional(),
});

export type ListImagesResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  list_response?: ListResponse | undefined;
  api_error?: ApiError | undefined;
};

export const ListImagesResponse$zodSchema: z.ZodType<
  ListImagesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  api_error: ApiError$zodSchema.optional(),
  list_response: ListResponse$zodSchema.optional(),
});
