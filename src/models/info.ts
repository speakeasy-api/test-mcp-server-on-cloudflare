/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Included if 'context=true' parameter is used.
 */
export type InfoContext = { custom?: { [k: string]: any } | undefined };

export const InfoContext$zodSchema: z.ZodType<
  InfoContext,
  z.ZodTypeDef,
  unknown
> = z.object({
  custom: z.record(z.any()).optional(),
}).describe("Included if 'context=true' parameter is used.");

export type InfoModeration = {
  kind?: string | undefined;
  status?: string | undefined;
  updated_at?: string | undefined;
};

export const InfoModeration$zodSchema: z.ZodType<
  InfoModeration,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.string().optional(),
  status: z.string().optional(),
  updated_at: z.string().datetime({ offset: true }).optional(),
});

export type InfoAccessControl = {};

export const InfoAccessControl$zodSchema: z.ZodType<
  InfoAccessControl,
  z.ZodTypeDef,
  unknown
> = z.object({});

export type Derivative = {
  id?: string | undefined;
  transformation?: string | undefined;
  transformation_signature?: string | undefined;
  secure_url?: string | undefined;
};

export const Derivative$zodSchema: z.ZodType<
  Derivative,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  secure_url: z.string().optional(),
  transformation: z.string().optional(),
  transformation_signature: z.string().optional(),
});

export type Info = {
  asset_id?: string | undefined;
  public_id?: string | undefined;
  asset_folder?: string | undefined;
  display_name?: string | undefined;
  folder?: string | undefined;
  filename?: string | undefined;
  format?: string | undefined;
  version?: number | undefined;
  resource_type?: string | undefined;
  type?: string | undefined;
  created_at?: string | undefined;
  uploaded_at?: string | undefined;
  bytes?: number | undefined;
  backup_bytes?: number | undefined;
  width?: number | null | undefined;
  height?: number | null | undefined;
  aspect_ratio?: number | null | undefined;
  pixels?: number | null | undefined;
  tags?: Array<string> | undefined;
  context?: InfoContext | undefined;
  metadata?: { [k: string]: any } | undefined;
  moderation_kind?: string | undefined;
  moderation_status?: string | undefined;
  moderation?: Array<InfoModeration> | undefined;
  backup?: boolean | undefined;
  access_mode?: string | undefined;
  url?: string | undefined;
  secure_url?: string | undefined;
  status?: string | undefined;
  access_control?: Array<InfoAccessControl> | null | undefined;
  etag?: string | undefined;
  derivatives?: Array<Derivative> | undefined;
};

export const Info$zodSchema: z.ZodType<Info, z.ZodTypeDef, unknown> = z.object({
  access_control: z.array(z.lazy(() => InfoAccessControl$zodSchema)).nullable()
    .optional(),
  access_mode: z.string().optional(),
  aspect_ratio: z.number().nullable().optional(),
  asset_folder: z.string().optional(),
  asset_id: z.string().optional(),
  backup: z.boolean().optional(),
  backup_bytes: z.number().int().optional(),
  bytes: z.number().int().optional(),
  context: z.lazy(() => InfoContext$zodSchema).optional(),
  created_at: z.string().datetime({ offset: true }).optional(),
  derivatives: z.array(z.lazy(() => Derivative$zodSchema)).optional(),
  display_name: z.string().optional(),
  etag: z.string().optional(),
  filename: z.string().optional(),
  folder: z.string().optional(),
  format: z.string().optional(),
  height: z.number().int().nullable().optional(),
  metadata: z.record(z.any()).optional(),
  moderation: z.array(z.lazy(() => InfoModeration$zodSchema)).optional(),
  moderation_kind: z.string().optional(),
  moderation_status: z.string().optional(),
  pixels: z.number().int().nullable().optional(),
  public_id: z.string().optional(),
  resource_type: z.string().optional(),
  secure_url: z.string().optional(),
  status: z.string().optional(),
  tags: z.array(z.string()).optional(),
  type: z.string().optional(),
  uploaded_at: z.string().datetime({ offset: true }).optional(),
  url: z.string().optional(),
  version: z.number().int().optional(),
  width: z.number().int().nullable().optional(),
});
