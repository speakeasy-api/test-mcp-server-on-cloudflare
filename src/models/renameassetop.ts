/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ApiError, ApiError$zodSchema } from "./apierror.js";
import { ResourceType, ResourceType$zodSchema } from "./resourcetype.js";
import { StorageType, StorageType$zodSchema } from "./storagetype.js";
import { UploadResponse, UploadResponse$zodSchema } from "./uploadresponse.js";

export type RenameAssetGlobals = { cloud_name?: string | undefined };

export const RenameAssetGlobals$zodSchema: z.ZodType<
  RenameAssetGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().describe("The cloud name of your product environment.")
    .optional(),
});

export type RenameAssetRequestBody = {
  api_key?: string | undefined;
  timestamp?: number | undefined;
  signature?: string | undefined;
  from_public_id: string;
  to_public_id: string;
  type?: StorageType | undefined;
  to_type?: StorageType | undefined;
  overwrite?: boolean | undefined;
  invalidate?: boolean | undefined;
  context?: string | undefined;
  metadata?: string | undefined;
  notification_url?: string | undefined;
};

export const RenameAssetRequestBody$zodSchema: z.ZodType<
  RenameAssetRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_key: z.string().optional(),
  context: z.string().optional(),
  from_public_id: z.string(),
  invalidate: z.boolean().optional(),
  metadata: z.string().optional(),
  notification_url: z.string().optional(),
  overwrite: z.boolean().optional(),
  signature: z.string().optional(),
  timestamp: z.number().int().optional(),
  to_public_id: z.string(),
  to_type: StorageType$zodSchema.optional(),
  type: StorageType$zodSchema.optional(),
});

export type RenameAssetRequest = {
  resource_type: ResourceType;
  RequestBody: RenameAssetRequestBody;
};

export const RenameAssetRequest$zodSchema: z.ZodType<
  RenameAssetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => RenameAssetRequestBody$zodSchema),
  resource_type: ResourceType$zodSchema,
});

export type RenameAssetResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  upload_response?: UploadResponse | undefined;
  api_error?: ApiError | undefined;
};

export const RenameAssetResponse$zodSchema: z.ZodType<
  RenameAssetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  api_error: ApiError$zodSchema.optional(),
  upload_response: UploadResponse$zodSchema.optional(),
});
