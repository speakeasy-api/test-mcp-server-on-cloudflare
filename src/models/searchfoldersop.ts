/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ApiError, ApiError$zodSchema } from "./apierror.js";
import {
  FoldersSearchResponse,
  FoldersSearchResponse$zodSchema,
} from "./folderssearchresponse.js";

export type SearchFoldersGlobals = { cloud_name?: string | undefined };

export const SearchFoldersGlobals$zodSchema: z.ZodType<
  SearchFoldersGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().describe("The cloud name of your product environment.")
    .optional(),
});

export type Expression = {};

export const Expression$zodSchema: z.ZodType<
  Expression,
  z.ZodTypeDef,
  unknown
> = z.object({});

/**
 * The (Lucene-like) string expression specifying the search query, or an object for advanced queries. If not passed, returns all folders (up to max_results).
 */
export type ExpressionUnion = Expression | string;

export const ExpressionUnion$zodSchema: z.ZodType<
  ExpressionUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Expression$zodSchema),
  z.string(),
]).describe(
  "The (Lucene-like) string expression specifying the search query, or an object for advanced queries. If not passed, returns all folders (up to max_results).",
);

export type SearchFoldersRequest = {
  expression?: Expression | string | undefined;
  sort_by?: Array<string> | undefined;
  max_results?: number | undefined;
  next_cursor?: string | undefined;
};

export const SearchFoldersRequest$zodSchema: z.ZodType<
  SearchFoldersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expression: z.union([
    z.lazy(() => Expression$zodSchema),
    z.string(),
  ]).optional(),
  max_results: z.number().int().default(50).describe(
    "Maximum number of folders to return (max 500, default 50).",
  ),
  next_cursor: z.string().describe(
    "The cursor for pagination. Use the next_cursor value from a previous response to get the next page of results.",
  ).optional(),
  sort_by: z.array(z.string()).describe(
    "An array of key-value pairs for sorting. Each value is a key and direction (asc/desc).",
  ).optional(),
});

export type SearchFoldersResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  folders_search_response?: FoldersSearchResponse | undefined;
  api_error?: ApiError | undefined;
};

export const SearchFoldersResponse$zodSchema: z.ZodType<
  SearchFoldersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  api_error: ApiError$zodSchema.optional(),
  folders_search_response: FoldersSearchResponse$zodSchema.optional(),
});
