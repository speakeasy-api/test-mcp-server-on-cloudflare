/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.
 */
export const DeleteResourceByPublicIdsRequestResourceType3$zodSchema = z.enum([
  "image",
  "video",
  "raw",
]).describe(
  "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.",
);

export type DeleteResourceByPublicIdsRequestResourceType3 = z.infer<
  typeof DeleteResourceByPublicIdsRequestResourceType3$zodSchema
>;

export type DeleteResourceByPublicIdsRequest3 = {
  public_ids?: Array<string> | undefined;
  prefix?: string | undefined;
  all: boolean;
  resource_type?: DeleteResourceByPublicIdsRequestResourceType3 | undefined;
  keep_original?: boolean | undefined;
  invalidate?: boolean | undefined;
  next_cursor?: string | undefined;
  transformations?: string | undefined;
};

export const DeleteResourceByPublicIdsRequest3$zodSchema: z.ZodType<
  DeleteResourceByPublicIdsRequest3,
  z.ZodTypeDef,
  unknown
> = z.object({
  all: z.boolean(),
  invalidate: z.boolean().default(false),
  keep_original: z.boolean().default(false),
  next_cursor: z.string().optional(),
  prefix: z.string().optional(),
  public_ids: z.array(z.string()).optional(),
  resource_type: DeleteResourceByPublicIdsRequestResourceType3$zodSchema
    .default("image"),
  transformations: z.string().optional(),
});

/**
 * The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.
 */
export const DeleteResourceByPublicIdsRequestResourceType2$zodSchema = z.enum([
  "image",
  "video",
  "raw",
]).describe(
  "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.",
);

export type DeleteResourceByPublicIdsRequestResourceType2 = z.infer<
  typeof DeleteResourceByPublicIdsRequestResourceType2$zodSchema
>;

export type DeleteResourceByPublicIdsRequest2 = {
  public_ids?: Array<string> | undefined;
  prefix: string;
  all?: boolean | undefined;
  resource_type?: DeleteResourceByPublicIdsRequestResourceType2 | undefined;
  keep_original?: boolean | undefined;
  invalidate?: boolean | undefined;
  next_cursor?: string | undefined;
  transformations?: string | undefined;
};

export const DeleteResourceByPublicIdsRequest2$zodSchema: z.ZodType<
  DeleteResourceByPublicIdsRequest2,
  z.ZodTypeDef,
  unknown
> = z.object({
  all: z.boolean().optional(),
  invalidate: z.boolean().default(false),
  keep_original: z.boolean().default(false),
  next_cursor: z.string().optional(),
  prefix: z.string(),
  public_ids: z.array(z.string()).optional(),
  resource_type: DeleteResourceByPublicIdsRequestResourceType2$zodSchema
    .default("image"),
  transformations: z.string().optional(),
});

/**
 * The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.
 */
export const DeleteResourceByPublicIdsRequestResourceType1$zodSchema = z.enum([
  "image",
  "video",
  "raw",
]).describe(
  "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.",
);

export type DeleteResourceByPublicIdsRequestResourceType1 = z.infer<
  typeof DeleteResourceByPublicIdsRequestResourceType1$zodSchema
>;

export type DeleteResourceByPublicIdsRequest1 = {
  public_ids: Array<string>;
  prefix?: string | undefined;
  all?: boolean | undefined;
  resource_type?: DeleteResourceByPublicIdsRequestResourceType1 | undefined;
  keep_original?: boolean | undefined;
  invalidate?: boolean | undefined;
  next_cursor?: string | undefined;
  transformations?: string | undefined;
};

export const DeleteResourceByPublicIdsRequest1$zodSchema: z.ZodType<
  DeleteResourceByPublicIdsRequest1,
  z.ZodTypeDef,
  unknown
> = z.object({
  all: z.boolean().optional(),
  invalidate: z.boolean().default(false),
  keep_original: z.boolean().default(false),
  next_cursor: z.string().optional(),
  prefix: z.string().optional(),
  public_ids: z.array(z.string()),
  resource_type: DeleteResourceByPublicIdsRequestResourceType1$zodSchema
    .default("image"),
  transformations: z.string().optional(),
});

export type DeleteResourceByPublicIdsRequestUnion =
  | DeleteResourceByPublicIdsRequest1
  | DeleteResourceByPublicIdsRequest2
  | DeleteResourceByPublicIdsRequest3;

export const DeleteResourceByPublicIdsRequestUnion$zodSchema: z.ZodType<
  DeleteResourceByPublicIdsRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeleteResourceByPublicIdsRequest1$zodSchema),
  z.lazy(() => DeleteResourceByPublicIdsRequest2$zodSchema),
  z.lazy(() => DeleteResourceByPublicIdsRequest3$zodSchema),
]);
